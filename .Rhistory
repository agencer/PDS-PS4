sd(trials_100), mean(trials_25), sd(trials_25))
colnames(table) <- c("True Mean", "Size-100 Mean", "Size-100 SD",
"Size-25 Mean", "Size-25 SD")
kable(table)
# Chunk 10: getting ready Q2
rm(list = ls())
poll.data <- read.csv("http://politicaldatascience.com/PDS/Datasets/SenateForecast/PollingCandidateData92-16.csv")
# Chunk 11: Q2 Part 1
poll.data.2 <- poll.data %>%
group_by(Candidateidentifier) %>%
filter(row_number(Percentage.of.Vote.won.x) == 1) %>%
select(-c("pollster", "poll_period", "daysLeft"))
# Chunk 12: Q2 Part 2
########  20 percent of data as validation (test) data:
sample.stat <- sample(1:783, size = 157)
validation <- poll.data.2[sample.stat,]
train <- poll.data.2[-sample.stat,]
View(poll.data.2)
str(poll.data.2)
name(poll.data.2)
name(poll.data.2)
names(poll.data.2)
View(poll.data.2)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
rmse0 <- c()        ####  Model 0   Percentage.of.Vote.won.x ~ Democrat
rmse1 <- c()        ####  Model 1   Percentage.of.Vote.won.x ~ Democrat + incumbent
rmse2 <- c()        ####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
rmse3 <- c()        ####  Model 3   Percentage.of.Vote.won.x ~ Democrat + PercentageRaised
rmse4 <- c()        ####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
####  Model 0   Percentage.of.Vote.won.x ~ Democrat
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
library(rsample)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse1)
rmse0 <- c()        ####  Model 0   Percentage.of.Vote.won.x ~ Democrat
rmse1 <- c()        ####  Model 1   Percentage.of.Vote.won.x ~ Democrat + incumbent
rmse2 <- c()        ####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
rmse3 <- c()        ####  Model 3   Percentage.of.Vote.won.x ~ Democrat + PercentageRaised
rmse4 <- c()        ####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
####
####  Model 1   Percentage.of.Vote.won.x ~ Democrat + incumbent
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse1)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse1)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + Incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse1)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + pvi, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse2 <- c(rmse2, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse2)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse4 <- c(rmse4, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse4)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + PercentageRaised, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse3 <- c(rmse3, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse3)
kable(data.frame(cbin(rmse0, rmse1, rmse2, rmse3, rmse4, rmse5)))
kable(data.frame(cbind(rmse0, rmse1, rmse2, rmse3, rmse4, rmse5)))
kable(data.frame(cbind(rmse0, rmse1, rmse2, rmse3, rmse4)))
kable(data.frame(cbind(mean(rmse0), mean(rmse1), mean(rmse2), mean(rmse3), mean(rmse4))))
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse1), mean(rmse2), mean(rmse3), mean(rmse4)))
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse1), mean(rmse2), mean(rmse3), mean(rmse4)))
colnames(df.1) <- c("Baseline (BL) Democrat", "BL + Incumbent", "BL + pvi", "BL + cycle", "BL + weightexperience")
kable(df.1)
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
####
####  Model 1   Percentage.of.Vote.won.x ~ Democrat + Incumbent
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + Incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse1)
####
####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + pvi, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse2 <- c(rmse2, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse2)
####
####  Model 3   Percentage.of.Vote.won.x ~ Democrat + cycle
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + cycle, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse3 <- c(rmse3, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse3)
####
####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse4 <- c(rmse4, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse4)
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse1), mean(rmse2), mean(rmse3), mean(rmse4)))
colnames(df.1) <- c("Baseline (BL)", "BL + Incumbent", "BL + pvi", "BL + cycle", "BL + weightexperience")
kable(df.1)
########  Linear Baseline Models:
####
rmse0 <- c()        ####  Model 0   Percentage.of.Vote.won.x ~ Democrat
rmse1 <- c()        ####  Model 1   Percentage.of.Vote.won.x ~ Democrat + incumbent
rmse2 <- c()        ####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
rmse3 <- c()        ####  Model 3   Percentage.of.Vote.won.x ~ Democrat + cycle
rmse4 <- c()        ####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
rmse5 <- c()        ####  Model 4   Percentage.of.Vote.won.x ~ Democrat + state
####
####  Model 0   Percentage.of.Vote.won.x ~ Democrat
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
####
####  Model 1   Percentage.of.Vote.won.x ~ Democrat + Incumbent
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + Incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse1)
####
####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + pvi, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse2 <- c(rmse2, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse2)
####
####  Model 3   Percentage.of.Vote.won.x ~ Democrat + cycle
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + cycle, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse3 <- c(rmse3, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse3)
####
####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse4 <- c(rmse4, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse4)
####
####  Model 5   Percentage.of.Vote.won.x ~ Democrat + state
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + state, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse5 <- c(rmse5, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse5)
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse1), mean(rmse2), mean(rmse3), mean(rmse4), mean(rmse5)))
colnames(df.1) <- c("Baseline (BL)", "BL + Incumbent", "BL + pvi", "BL + cycle", "BL + weightexperience", "BL + state")
kable(df.1)
########  Linear Baseline Models:
####
rmse0 <- c()        ####  Model 0   Percentage.of.Vote.won.x ~ Democrat
rmse1 <- c()        ####  Model 1   Percentage.of.Vote.won.x ~ Democrat + incumbent
rmse2 <- c()        ####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
rmse3 <- c()        ####  Model 3   Percentage.of.Vote.won.x ~ Democrat + cycle
rmse4 <- c()        ####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
rmse5 <- c()        ####  Model 4   Percentage.of.Vote.won.x ~ Democrat + state
####
####  Model 0   Percentage.of.Vote.won.x ~ Democrat
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse0 <- c(rmse0, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
mean(rmse0)
####
####  Model 1   Percentage.of.Vote.won.x ~ Democrat + Incumbent
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + factor(Incumbent), data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse1 <- c(rmse1, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  Model 2   Percentage.of.Vote.won.x ~ Democrat + pvi
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + pvi, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse2 <- c(rmse2, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  Model 3   Percentage.of.Vote.won.x ~ Democrat + cycle
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + factor(cycle), data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse3 <- c(rmse3, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  Model 4   Percentage.of.Vote.won.x ~ Democrat + weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse4 <- c(rmse4, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  Model 5   Percentage.of.Vote.won.x ~ Democrat + state
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + factor(state), data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse5 <- c(rmse5, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse1), mean(rmse2), mean(rmse3), mean(rmse4), mean(rmse5)))
colnames(df.1) <- c("Baseline (BL)", "BL + Incumbent", "BL + pvi", "BL + cycle", "BL + weightexperience", "BL + state")
kable(df.1)
rmse6 <- c()        ####  Model 6   Percentage.of.Vote.won.x ~ Democrat + poly(Incumbent, 2)
rmse7 <- c()        ####  Model 7   Percentage.of.Vote.won.x ~ Democrat * Incumbent
rmse8 <- c()        ####  Model 8   Percentage.of.Vote.won.x ~ Democrat + poly(weightexperience, 2)
rmse9 <- c()        ####  Model 9   Percentage.of.Vote.won.x ~ Democrat * weightexperience
rmse10<- c()        ####  Model 10  Percentage.of.Vote.won.x ~ Democrat + Incumbent + weightexperience
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse6), mean(rmse7), mean(rmse8), mean(rmse9), mean(rmse10)))
colnames(df.1) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience")
########  Linear Baseline Models:
####
rmse6 <- c()        ####  Model 6   Percentage.of.Vote.won.x ~ Democrat + poly(Incumbent, 2)
rmse7 <- c()        ####  Model 7   Percentage.of.Vote.won.x ~ Democrat * Incumbent
rmse8 <- c()        ####  Model 8   Percentage.of.Vote.won.x ~ Democrat + poly(weightexperience, 2)
rmse9 <- c()        ####  Model 9   Percentage.of.Vote.won.x ~ Democrat * weightexperience
rmse10<- c()        ####  Model 10  Percentage.of.Vote.won.x ~ Democrat + Incumbent + weightexperience
####
####  Model 6   Percentage.of.Vote.won.x ~ Democrat + poly(Incumbent, 2)
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + poly(Incumbent, 2) , data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse6 <- c(rmse6, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  Model 7   Percentage.of.Vote.won.x ~ Democrat * Incumbent
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat * Incumbent, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse7 <- c(rmse7, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  ####  Model 8   Percentage.of.Vote.won.x ~ Democrat + poly(weightexperience, 2)
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat + poly(weightexperience, 2) , data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse8 <- c(rmse8, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  ####  Model 9   Percentage.of.Vote.won.x ~ Democrat * weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~ Democrat * weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse9 <- c(rmse9, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
####
####  ####  Model 10  Percentage.of.Vote.won.x ~ Democrat + Incumbent + weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~  Democrat + Incumbent + weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse10 <- c(rmse10, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse6), mean(rmse7), mean(rmse8), mean(rmse9), mean(rmse10)))
colnames(df.1) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience")
kable(df.1)
rmse11<- c()        ####  Model 10  Percentage.of.Vote.won.x ~ Democrat + Incumbent * weightexperience
####
####  ####  Model 11  Percentage.of.Vote.won.x ~ Democrat + Incumbent * weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~  Democrat + Incumbent * weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse11 <- c(rmse11, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse6), mean(rmse7), mean(rmse8), mean(rmse9),
mean(rmse10), mean(rmse11)))
colnames(df.1) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience")
kable(df.1)
####
####  ####  Model 11  Percentage.of.Vote.won.x ~ Democrat + Incumbent * weightexperience
####
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~  Democrat * Incumbent * weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse11 <- c(rmse11, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse6), mean(rmse7), mean(rmse8), mean(rmse9),
mean(rmse10), mean(rmse11)))
colnames(df.1) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience",
"Interaction Inc and  weightexperience",)
kable(df.1)
rmse11<- c()        ####  Model 10  Percentage.of.Vote.won.x ~ Democrat + Incumbent * weightexperience
for(i in 1:500){
split_electData <- initial_split(poll.data.2, prop=.8)
elect_train <- training(split_electData)
elect_test <- testing(split_electData)
model <- lm(Percentage.of.Vote.won.x ~  Democrat * Incumbent * weightexperience, data = elect_train)
pred <- predict(model, newdata = elect_test)
rmse11 <- c(rmse11, sqrt(mean((pred-elect_test$Percentage.of.Vote.won.x)^2)))
}
df.1 <- data.frame(cbind(mean(rmse0), mean(rmse6), mean(rmse7), mean(rmse8), mean(rmse9),
mean(rmse10), mean(rmse11)))
colnames(df.1) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience",
"Interaction Inc and  weightexperience",)
kable(df.1)
df.2 <- data.frame(cbind(mean(rmse0), mean(rmse6), mean(rmse7), mean(rmse8), mean(rmse9),
mean(rmse10), mean(rmse11)))
colnames(df.2) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience",
"Interaction Inc and  weightexperience",)
kable(df.2)
colnames(df.2) <- c("BL", "Poly Inc", "Interaction Inc.", "Poly weightexperience",
"Interaction weightexperience", "BL + Inc + weightexperience",
"Interaction Inc and  weightexperience")
kable(df.2)
colnames(df.2) <- c("BL", "Poly Inc", "Int. Inc.", "Poly weight",
"Int. weight", "BL + Inc + weight",
"Int. Inc and  weight")
kable(df.2)
